src_ip(Packet_Name,Src_IP) :- 
    packet(Packet_Name,List),
    [Src_IP|_]=List.

dest_ip(Packet_Name,Dest_IP) :- 
    packet(Packet_Name,List),
    [_|[Dest_IP|_]]=List.

adapter_num(Packet_Name,Adapter_Num) :- 
    packet(Packet_Name,List),
    [_|[_|[Adapter_Num|_]]]=List.

protocol_type(Packet_Name,Protocol_Type) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[Protocol_Type|_]]]]=List.

port_num(Packet_Name,Port_Num) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[_|[Port_Num|_]]]]]=List.


icmpv6_type(Packet_Name,Icmpv6_Type) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[_|[_|[Icmpv6_Type|_]]]]]]=List.

icmpv6_msgCode(Packet_Name,Icmpv6_MsgCode) :- 
    packet(Packet_Name,List),
	[_|[_|[_|[_|[_|[_|[Icmpv6_MsgCode|_]]]]]]]=List.

vlanId(Packet_Name,VlanId) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[_|[_|[_|[_|[VlanId|_]]]]]]]]=List.


/*----------------FACTS-------------*/

packet(pack1,['50.223.138.93','78.87.13.100','55332','FTP','103','icmpProtoTypeBlank','protoMsgcodeBlank','idBlank']).

/*-----------RULE BASE--------------*/
accept('adapter A').
accept('adapter D,E,F').
reject('adapter B-C').
drop('adapter any').

/*------------Rule to see if adapter is acceptable------------*/
isadapterAccepted(AcceptedAdapter) :- 
    accept(X),
    sub_string(X,7,_,_,AcceptedAdapter),
    AcceptedAdapter \= "",
    AcceptedAdapter \= " ".

/*isAdapterDiscr(X) :-
  isAdapterList(X) :-
  isAdapterRange(X) :-
 */ 


accept('ether vid 2').
reject('ether vid 5-19').
drop('ether proto 0x6dd').
accept('ether proto 187').
accept('ether proto 127').
accept('ether proto asd').
accept('ether vlan 5 proto 187').


accept('ip src addr 172.12.12.2').
accept('ip dst addr 122.12.12.2').
accept('ip addr 172.2.12.2').
accept('ip proto tcp').
accept('ip src addr 172.12.2.0 dst addr 167.97.12.2 proto ftp').


/*-----Rules to check if an expression is a list or a discrete value or a list*/

isExprAList(X) :- chPresentInStr(',',X).
isExprARange(X) :- chPresentInStr('-',X).
isExprADiscrValue(X) :- not(isExprAList(X)),not(isExprARange(X)).

chPresentInStr(Ch,Str) :- sub_atom_icasechk(Str,_,Ch).



