/*----------------NEW CODE----------------------*/
/*-----------------Rules------------------*/

/*
 * List is ['src_ip','dest_ip','adapter_num','protocol_type','port_num','icmpv6_type','icmpv6_msg_code','VLan_ID']
 */


src_ip(Packet_Name,Src_IP) :- 
    packet(Packet_Name,List),
    [Src_IP|_]=List.

dest_ip(Packet_Name,Dest_IP) :- 
    packet(Packet_Name,List),
    [_|[Dest_IP|_]]=List.

adapter_num(Packet_Name,Adapter_Num) :- 
    packet(Packet_Name,List),
    [_|[_|[Adapter_Num|_]]]=List.

protocol_type(Packet_Name,Protocol_Type) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[Protocol_Type|_]]]]=List.

port_num(Packet_Name,Port_Num) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[_|[Port_Num|_]]]]]=List.


icmpv6_type(Packet_Name,Icmpv6_Type) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[_|[_|[Icmpv6_Type|_]]]]]]=List.

icmpv6_msgCode(Packet_Name,Icmpv6_MsgCode) :- 
    packet(Packet_Name,List),
	[_|[_|[_|[_|[_|[_|[Icmpv6_MsgCode|_]]]]]]]=List.

vlanId(Packet_Name,VlanId) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[_|[_|[_|[_|[VlanId|_]]]]]]]]=List.


/*----------------FACTS-------------*/

packet(pack1,['50.223.138.93','78.87.13.100','55332','FTP','103','icmpProtoTypeBlank','protoMsgcodeBlank','idBlank']).

/*-----------Rule Base-----------*/
accept('ether proto 187').
accept('ether proto 127').
accept('ether proto asd').
accept('ether proto 0x6dd').
accept('ether vid 2').
accept('ether vid 20-191 proto 1111').
accept('ether vid 5,4,1,8 proto 117').
accept('adapter C,F,K').
accept('adapter A').
accept('adapter L-P').
accept('adapter any').
accept('ip src addr 172.12.12.2,11.21.11').
accept('ip dst addr 122.12.12.2').
accept('ip addr 172.2.12.2,123.121.11').
accept('ip proto tcp').
accept('ip src addr 172.12.2.0 dst addr 167.97.12.2 proto ftp').


/*------------Rule to see if adapter is acceptable------------*/
isAdapterAccepted(AdapterName) :- 
    accept(X),
    sub_string(X,0,7,_,'adapter'),
    (
    (
     sub_string(X,_,_,_,AdapterNamePresent),
     AdapterNamePresent=AdapterName
    );
    (
     isExprARange(X),
     sub_string(X,8,1,_,LeftOfRange),
     sub_string(X,10,1,_,RightOfRange),
     char_code(LeftOfRange,LeftOfRangeAscii),
     char_code(RightOfRange,RightOfRangeAscii),
     char_code(AdapterName,AdapterAscii),
     AdapterAscii>=LeftOfRangeAscii,
     AdapterAscii=<RightOfRangeAscii
    );
    (   
      sub_string(X,8,3,_,'any')
    )
    ).
/*------------Rule to see if ProtocolID is acceptable------------*/
isProtocolIDAccepted(ProtocolId) :- 
    accept(X),
    (
      (
        sub_string(X,0,11,_,'ether proto'),
        sub_string(X,_,_,_,PresentProtocolID),
        PresentProtocolID = ProtocolId
      )
    	;
      (   
          sub_string(X,Index,_,_,'proto'),
          Index >= 7,
          sub_string(X,_,_,_,PresentProtocolID),
          PresentProtocolID = ProtocolId
      )
    ).

/*------------Rule to see if VlanID is acceptable------------*/
isVlanIDAccepted(VlanId) :- 
    accept(X),
    sub_string(X,0,9,_,'ether vid'),
    (   
      (
          sub_string(X,Start,_,_,PresentVlanID),
          sub_string(X,ProtoIndex,5,_,'proto'),
          Start<ProtoIndex,
          PresentVlanID = VlanId
      )
      ;
      (
          sub_string(X,10,Len,_,Range),
          isExprARange(Range),
          Start is 10+Len,
          sub_string(X,Start,1,_,' '),
          sub_string(Range,0,Len2,_,LeftOfRange),
          Start2 is 1+Len2,
          not(sub_string(Range,Start2,1,_,'-')),
          Start3 is Start2,
          sub_string(Range,Start3,Len3,_,RightOfRange),
          Start4 is 1+Len3,
          sub_string(Range,Start4,_,0,_),
          atom_number(LeftOfRange,LeftNum),
          atom_number(RightOfRange,RightNum),
          atom_number(VlanId,VlanIdNum),
          LeftNum=<VlanIdNum,
          RightNum>=VlanIdNum
      )
    ).

	isSrcIPAccepted(SrcIP) :- 
    	accept(X),
    	atom_length(X,XLength),
    	sub_string(X,0,2,_,'ip'),
    	(
          (
            sub_string(X,SrcIndex,3,_,'src'),
            Start1 is SrcIndex+9,
                (   
                  (
                    sub_string(X,Start2,1,_,' '),
                    Start2 >= Start1,
                    Length is Start2-Start1,
                    sub_string(X,Start1,Length,_,SrcIPList),
                    sub_string(SrcIPList,_,_,_,SrcIP)
                  );
                 (
                     not(sub_string(X,_,3,_,'dst')),
                     sub_string(X,_,3,_,'src'),
                     StrLen is XLength - Start1,
                     sub_string(X,Start1,StrLen,_,SrcIPList),
                     sub_string(SrcIPList,_,_,_,SrcIP)
                 )
               )
          );
           (   
                not(sub_string(X,_,3,_,'dst')),
                not(sub_string(X,_,3,_,'src')),
                sub_string(X,Start,4,_,'addr'),
                Start2 is Start+5,
               	StrLen is XLength - Start2,
                sub_string(X,Start2,StrLen,_,PresentIPList),
                sub_string(PresentIPList,_,_,_,SrcIP)
           )).

    isDstIPAccepted(SrcIP) :- 
            accept(X),
            sub_string(X,0,2,_,'ip'),
            (
              (
                sub_string(X,SrcIndex,3,_,'src'),
                Start1 is SrcIndex+9,
                    (   
                      (
                        sub_string(X,Start2,1,_,' '),
                        Start2 >= Start1,
                        Length is Start2-Start1,
                        sub_string(X,Start1,Length,_,SrcIP)
                      );
                     (
                         not(sub_string(X,_,3,_,'dst')),
                         sub_string(X,_,3,_,'src'),
                         atom_length(X,XLength),
                         StrLen is XLength - Start1,
                         sub_string(X,Start1,StrLen,_,SrcIP)
                     )
                   )
              );
               (   
                    not(sub_string(X,_,3,_,'dst')),
                    not(sub_string(X,_,3,_,'src')),
                    sub_string(X,_,4,_,'addr'),
                    sub_string(X,_,_,_,PresentIP),
                    PresentIP = SrcIP
               )).

	isIpInRange(_,Range,LeftIPContents,RightIPContents) :- 
    	sub_string(Range,HyphenIndex,1,_,'-'),
    	atom_length(Range,RangeLength),
    	LeftIPLength is HyphenIndex,
    	RightIPLength is RangeLength-LeftIPLength-1,
    	sub_string(Range,0,LeftIPLength,_,LeftIP),
    	RightIPIndex is HyphenIndex+1,
    	sub_string(Range,RightIPIndex,RightIPLength,_,RightIP),
    	split_string(LeftIP,".","", LeftIPContents),
    	split_string(RightIP,".","", RightIPContents).
	
	isIPALessThanB(IP_A,IP_B) :- 
    	[H1|T1] = IP_A,
    	[H2|T2] = IP_B,
		[H3|T3] = T1,
    	[H4|T4] = T2,
		[H5|T5] = T3,
    	[H6|T6] = T4,
		[H7|_] = T5,
    	[H8|_] = T6,
     (   
        (H1 < H2);
    		(   
            	( H1 = H2 ),
                	(   
                    	( H3<H4  );
                    		(   
                            	(H3=H4),
                                	(   
                                    	(H5<H6);
                                    		(   
                                            	(H5=H6),
                                                (H7<H8)
                                            )
                                    )
                            )
                    )
            )
	 ).
		
    
/*
 * 
 * Query to check if a adapter is accepted
 * isAdapterAccepted("A"),!. //This ! tells prolog to stop looking after u find a match
 */ 
isExprAList(X) :- chPresentInStr(',',X).
isExprARange(X) :- chPresentInStr('-',X).
isExprADiscrValue(X) :- not(isExprAList(X)),not(isExprARange(X)).
chPresentInStr(Ch,Str) :- sub_atom_icasechk(Str,_,Ch).



