/*----------------NEW CODE----------------------*/
/*-----------------Rules------------------*/

/*
 * List is ['src_ip','dest_ip','adapter_num','protocol_type','port_num','icmpv6_type','icmpv6_msg_code','VLan_ID']
 */


src_ip(Packet_Name,Src_IP) :- 
    packet(Packet_Name,List),
    [Src_IP|_]=List.

dest_ip(Packet_Name,Dest_IP) :- 
    packet(Packet_Name,List),
    [_|[Dest_IP|_]]=List.

adapter_num(Packet_Name,Adapter_Num) :- 
    packet(Packet_Name,List),
    [_|[_|[Adapter_Num|_]]]=List.

protocol_type(Packet_Name,Protocol_Type) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[Protocol_Type|_]]]]=List.

port_num(Packet_Name,Port_Num) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[_|[Port_Num|_]]]]]=List.


icmpv6_type(Packet_Name,Icmpv6_Type) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[_|[_|[Icmpv6_Type|_]]]]]]=List.

icmpv6_msgCode(Packet_Name,Icmpv6_MsgCode) :- 
    packet(Packet_Name,List),
	[_|[_|[_|[_|[_|[_|[Icmpv6_MsgCode|_]]]]]]]=List.

vlanId(Packet_Name,VlanId) :- 
    packet(Packet_Name,List),
    [_|[_|[_|[_|[_|[_|[_|[VlanId|_]]]]]]]]=List.


/*----------------FACTS-------------*/

packet(pack1,['50.223.138.93','78.87.13.100','55332','FTP','103','icmpProtoTypeBlank','protoMsgcodeBlank','idBlank']).

/*-----------Rule Base-----------*/
accept('ether proto 187').
accept('ether proto 127').
accept('ether proto asd').
accept('ether proto 0x6dd').
accept('ether vid 2').
accept('ether vid 6-19 proto 1111').
accept('ether vid 5 proto 117').
accept('adapter any').
accept('adapter A').
accept('adapter D,E').
accept('adapter any').

/*------------Rule to see if adapter is acceptable------------*/
isAdapterAccepted(AdapterName) :- 
    accept(X),
    sub_string(X,0,7,_,'adapter'),
    (
    (
     sub_string(X,_,_,_,AdapterNamePresent),
     AdapterNamePresent=AdapterName
    );
    (
     isExprARange(X),
     sub_string(X,8,1,_,LeftOfRange),
     sub_string(X,10,1,_,RightOfRange),
     char_code(LeftOfRange,LeftOfRangeAscii),
     char_code(RightOfRange,RightOfRangeAscii),
     char_code(AdapterName,AdapterAscii),
     AdapterAscii>=LeftOfRangeAscii,
     AdapterAscii=<RightOfRangeAscii
    );
    (   
      sub_string(X,8,3,_,'any')
    )
    ).
/*------------Rule to see if ProtocolID is acceptable------------*/
isProtocolIDAccepted(ProtocolId) :- 
    accept(X),
    (
      (
        sub_string(X,0,11,_,'ether proto'),
        sub_string(X,12,_,_,PresentProtocolID),
        PresentProtocolID = ProtocolId
      )
    	;
      (   
          sub_string(X,Index,_,_,'proto'),
          Index >= 7,
          Start is Index+6,
          sub_string(X,Start,_,_,PresentProtocolID),
          PresentProtocolID = ProtocolId
      )
    ).

/*------------Rule to see if VlanID is acceptable------------*/
isVlanIDAccepted(VlanId) :- 
    accept(X),
    sub_string(X,0,9,_,'ether vid'),
    (   
      (
          sub_string(X,Start,_,_,PresentVlanID),
          Start >= 10,
          PresentVlanID = VlanId
      )
      ;
      (
          sub_string(X,10,Len,_,Range),
          isExprARange(Range),
          Start is 10+Len,
          sub_string(X,Start,1,_,' '),
          sub_string(Range,0,Len2,_,LeftOfRange),
          Start2 is 1+Len2,
          not(sub_string(Range,Start2,1,_,'-')),
          Start3 is Start2,
          sub_string(Range,Start3,Len3,_,RightOfRange),
          Start4 is 1+Len3,
          sub_string(Range,Start4,_,0,_),
          atom_number(LeftOfRange,LeftNum),
          atom_number(RightOfRange,RightNum),
          LeftNum=<VlanId,
          RightNum>=VlanId
      )
    ).
 


/*
 * 
 * Query to check if a adapter is accepted
 * isAdapterAccepted("A"),!. //This ! tells prolog to stop looking after u find a match
 */ 
isExprAList(X) :- chPresentInStr(',',X).
isExprARange(X) :- chPresentInStr('-',X).
isExprADiscrValue(X) :- not(isExprAList(X)),not(isExprARange(X)).
chPresentInStr(Ch,Str) :- sub_atom_icasechk(Str,_,Ch).



